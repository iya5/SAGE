UNAME = $(shell uname)

CC = gcc
CXX = g++
CFLAGS = -Wall -Wextra -Wpedantic -g -std=c23
CXXFLAGS = -Wall -Wextra -Wpedantic -std=c++17

INCLUDES = -Ilib/glfw/include -Ilib/glad/include -Ilib/cglm/include \
			-Ilib/slog/include -Ilib/openal-soft/include -Ilib/std \
			-Ilib/imgui -Ilib/imgui/backends -Ilib/dear_bindings/generated \
			-Ilib/dear_bindings/generated/backends

CFLAGS += $(INCLUDES)
CXXFLAGS += $(INCLUDES)

LDFLAGS = -lm lib/glad/src/glad.o lib/glfw/src/libglfw3.a \
		  lib/slog/src/slog.o lib/openal-soft/build/libopenal.so \
		  lib/dear_bindings/libimgui.a

ifeq ($(UNAME), Linux)
	LDFLAGS += -lGL -lX11 -lpthread -lXrandr -lXi -ldl
endif

SRC = $(wildcard src/*.c) $(wildcard src/**/*.c)
OBJ = $(SRC:.c=.o)
BIN = bin

.PHONY: all
all: dirs libs libimgui.a sage

IMGUI_SRC = lib/imgui/imgui.cpp \
			lib/imgui/imgui_draw.cpp \
			lib/imgui/imgui_tables.cpp \
			lib/imgui/imgui_widgets.cpp \
			lib/imgui/imgui_demo.cpp
IMGUI_OBJ = imgui.o imgui_draw.o imgui_demo.o imgui_tables.o imgui_widgets.o
DIMGUI_SRC = lib/dear_bindings/generated/dcimgui.cpp \
			 lib/dear_bindings/generated/dcimgui_internal.cpp \
			 lib/dear_bindings/generated/backends/dcimgui_impl_glfw.cpp \
			 lib/dear_bindings/generated/backends/dcimgui_impl_opengl3.cpp
DIMGUI_OBJ = dcimgui.o dcimgui_impl_opengl3.o dcimgui_impl_glfw.o dcimgui_internal.o

libs:
	cd lib/glfw && cmake . && make
	cd lib/glad && $(CC) -o src/glad.o -Iinclude -c src/glad.c
	cd lib/openal-soft/build && cmake .. && cmake --build .
	cd lib/slog && $(CC) -o src/slog.o -Iinclude -c src/slog.c

libimgui.a: $(DIMGUI_SRC)
	cd lib/dear_bindings && chmod +x BuildAllBindings.sh && \
		python -m venv venv && source venv/bin/activate && \
		pip install -r requirements.txt && ./BuildAllBindings.sh
	$(CXX) -c $(DIMGUI_SRC) $(IMGUI_SRC) -Ilib/imgui -Ilib/imgui/backends -Ilib/dear_bindings/generated -Ilib/dear_bindings/generated/backends
	ar rcs lib/dear_bindings/libimgui.a $(DIMGUI_OBJ) $(IMGUI_OBJ)
	rm $(DIMGUI_OBJ) $(IMGUI_OBJ)
	rm -rf lib/dear_bindings/venv

dirs: 
	mkdir -p ./$(BIN)

run:
	$(BIN)/sage

sage: $(OBJ)
	$(CXX) -o $(BIN)/sage $^ $(LDFLAGS) -lstdc++

%.o: %.c
	$(CC) -o $@ -c $< $(CFLAGS)

.PHONY: clean
clean:
	rm -rf $(BIN) $(OBJ)
